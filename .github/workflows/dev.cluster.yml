# This workflow will build and push a new container image to Github Packages,
# and then will deploy it to Elastic Kubernetes Service (EKS), when a release is created.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ACR repository to store your container images. 
#    You can use ACR EE instance for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/142168.htm
#
# 2. Create an ACK cluster to run your containerized application.
#    You can use ACK Pro cluster for more security and better performance.
#    For instructions see https://www.alibabacloud.com/help/doc-detail/95108.htm
#
# 3. Store your AccessKey pair in GitHub Actions secrets named `ACCESS_KEY_ID` and `ACCESS_KEY_SECRET`.
#    For instructions on setting up secrets see: https://developer.github.com/actions/managing-workflows/storing-secrets/
#
# 4. Change the values for the REGION_ID, REGISTRY, NAMESPACE, IMAGE, ACK_CLUSTER_ID, and ACK_DEPLOYMENT_NAME. 
#

name: Build and Deploy to EKS

# @Todo git workflow
on:
  push:
    branches:
    - master

# Environment variables available to all jobs and steps in this workflow.
env: 
  REGISTRY: docker.pkg.github.com
  NAMESPACE: bruno-teksial
  IMAGE: cee/cee
  HELM_CHART_NAME: functions
  DOCKER_STAGING_TEST: test
  DOCKER_STAGING_PROD: prod

  REGION_ID: eu-west-3
  EKS_CLUSTER_NAME: dev
  EKS_NAMESPACE: default

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # 1.1 Semver strategy
    - name: Bump version and push tag
      id: tag
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        INITIAL_VERSION: 1.0.0
        RELEASE_BRANCHES: master

    # # 1.2 Build & Staging prod
    # - name: Build prod
    #   run: |
    #     docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:${{ steps.tag.outputs.tag }}" --target "$DOCKER_STAGING_PROD" .

    # 1.3 Push github packages
    # - name: Login Github.com & Push
    #   run: |
    #     echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com --username ${{ github.actor }} --password-stdin
    #     docker push "$REGISTRY/$NAMESPACE/$IMAGE:${{ steps.tag.outputs.tag }}"

    # 1.4 Clone Manifest
    - name: Checkout
      uses: actions/checkout@v2
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
        fetch-depth: 0 # otherwise, you will failed to push refs to dest repo        
        repository: bruno-teksial/helm
        ref: 'dev'
        path: charts

    # 1.5 Search & Replace Image
    - name: Update Image
      run: |
        ESCAPE_IMAGE_NAME=${IMAGE//\//\\/}
        sed -i "s/$REGISTRY.*/$REGISTRY\/$NAMESPACE\/$ESCAPE_IMAGE_NAME:${{ steps.tag.outputs.tag }}/" charts/cee/deployment.yaml
        cat charts/cee/deployment.yaml

    - name: Commit files
      run: |
        cd charts
        git config --local user.email "bruno.teksial@gmailcom"
        git config --local user.name "Bruno Teksial"
        git commit -m "Update Image $REGISTRY/$NAMESPACE/$IMAGE:${{ steps.tag.outputs.tag }}" -a


    # 1.6 Copy file to another repo
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        repository: bruno-teksial/helm
        branch: dev
        force: true
        directory: charts

    # # 1.6 Copy file to another repo
    # - name: Pushes test file
    #   uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
    #   env:
    #     API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
    #   with:
    #     source_file: charts/cee/deployment.yaml
    #     destination_repo: bruno-teksial/helm
    #     destination_folder: charts/cee
    #     destination_branch: dev
    #     user_email: 'bruno.teksial@gmail.com'
    #     user_name: 'Bruno Teksial'
    #     # commit_message: "Update Image $REGISTRY/$NAMESPACE/$IMAGE:${{ steps.tag.outputs.tag }}"
